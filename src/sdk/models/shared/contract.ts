/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ContractTerms } from "./contractterms";
import { Expose, Transform, Type } from "class-transformer";

export enum ContractType {
    Procurement = "PROCUREMENT",
    Transport = "TRANSPORT",
    Shuttle = "SHUTTLE",
}

export class Contract extends SpeakeasyBase {
    /**
     * Whether the contract has been accepted by the agent
     */
    @SpeakeasyMetadata()
    @Expose({ name: "accepted" })
    accepted: boolean;

    /**
     * The time at which the contract is no longer available to be accepted
     */
    @SpeakeasyMetadata()
    @Expose({ name: "deadlineToAccept" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    deadlineToAccept?: Date;

    /**
     * Deprecated in favor of deadlineToAccept
     */
    @SpeakeasyMetadata()
    @Expose({ name: "expiration" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    expiration: Date;

    /**
     * The symbol of the faction that this contract is for.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "factionSymbol" })
    factionSymbol: string;

    /**
     * Whether the contract has been fulfilled
     */
    @SpeakeasyMetadata()
    @Expose({ name: "fulfilled" })
    fulfilled: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    @SpeakeasyMetadata()
    @Expose({ name: "terms" })
    @Type(() => ContractTerms)
    terms: ContractTerms;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: ContractType;
}
