/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ShipRefineSecurity extends SpeakeasyBase {
    @SpeakeasyMetadata({
        data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
    })
    agentToken: string;
}

export enum ShipRefineRequestBodyProduce {
    Iron = "IRON",
    Copper = "COPPER",
    Silver = "SILVER",
    Gold = "GOLD",
    Aluminum = "ALUMINUM",
    Platinum = "PLATINUM",
    Uranite = "URANITE",
    Meritium = "MERITIUM",
    Fuel = "FUEL",
}

export class ShipRefineRequestBody extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "produce" })
    produce: ShipRefineRequestBodyProduce;
}

export class ShipRefineRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: ShipRefineRequestBody;

    /**
     * The symbol of the ship
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=shipSymbol" })
    shipSymbol: string;
}

export class ShipRefineShipRefine200ResponseDataConsumed extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "tradeSymbol" })
    tradeSymbol?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "units" })
    units?: number;
}

export class ShipRefineShipRefine200ResponseDataProduced extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "tradeSymbol" })
    tradeSymbol?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "units" })
    units?: number;
}

export class ShipRefineShipRefine200ResponseData extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "cargo" })
    @Type(() => shared.ShipCargo)
    cargo: shared.ShipCargo;

    @SpeakeasyMetadata({ elemType: ShipRefineShipRefine200ResponseDataConsumed })
    @Expose({ name: "consumed" })
    @Type(() => ShipRefineShipRefine200ResponseDataConsumed)
    consumed: ShipRefineShipRefine200ResponseDataConsumed[];

    /**
     * A cooldown is a period of time in which a ship cannot perform certain actions.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "cooldown" })
    @Type(() => shared.Cooldown)
    cooldown: shared.Cooldown;

    @SpeakeasyMetadata({ elemType: ShipRefineShipRefine200ResponseDataProduced })
    @Expose({ name: "produced" })
    @Type(() => ShipRefineShipRefine200ResponseDataProduced)
    produced: ShipRefineShipRefine200ResponseDataProduced[];
}

/**
 * The ship has successfully started refining.
 */
export class ShipRefineShipRefine200Response extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    @Type(() => ShipRefineShipRefine200ResponseData)
    data: ShipRefineShipRefine200ResponseData;
}

export class ShipRefineResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * The ship has successfully started refining.
     */
    @SpeakeasyMetadata()
    shipRefine200Response?: ShipRefineShipRefine200Response;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
