/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contracts
 */
export class Contracts {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Accept Contract
     *
     * @remarks
     * Accept a contract.
     */
    async acceptContract(
        req: operations.AcceptContractRequest,
        security: operations.AcceptContractSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.AcceptContractResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AcceptContractRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/my/contracts/{contractId}/accept", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.AcceptContractSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.AcceptContractResponse = new operations.AcceptContractResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.acceptContract200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.AcceptContract200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Deliver Contract
     *
     * @remarks
     * Deliver cargo on a given contract.
     */
    async deliverContract(
        req: operations.DeliverContractRequest,
        security: operations.DeliverContractSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeliverContractResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeliverContractRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/my/contracts/{contractId}/deliver", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeliverContractSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeliverContractResponse = new operations.DeliverContractResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.deliverContract200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.DeliverContract200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Fulfill Contract
     *
     * @remarks
     * Fulfill a contract
     */
    async fulfillContract(
        req: operations.FulfillContractRequest,
        security: operations.FulfillContractSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.FulfillContractResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FulfillContractRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/my/contracts/{contractId}/fulfill", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FulfillContractSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.FulfillContractResponse = new operations.FulfillContractResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.fulfillContract200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.FulfillContract200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get Contract
     *
     * @remarks
     * Get the details of a contract by ID.
     */
    async getContract(
        req: operations.GetContractRequest,
        security: operations.GetContractSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetContractResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetContractRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/my/contracts/{contractId}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetContractSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetContractResponse = new operations.GetContractResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getContract200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetContract200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List Contracts
     *
     * @remarks
     * List all of your contracts.
     */
    async getContracts(
        req: operations.GetContractsRequest,
        security: operations.GetContractsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetContractsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetContractsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/my/contracts";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetContractsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetContractsResponse = new operations.GetContractsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getContracts200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetContracts200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }
}
