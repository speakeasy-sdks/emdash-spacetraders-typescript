/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Fleet
 */
export class Fleet {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    _language: string;
    _sdkVersion: string;
    _genVersion: string;

    constructor(
        defaultClient: AxiosInstance,
        securityClient: AxiosInstance,
        serverURL: string,
        language: string,
        sdkVersion: string,
        genVersion: string
    ) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }

    /**
     * Create Chart
     *
     * @remarks
     * Command a ship to chart the current waypoint.
     *
     * Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.
     *
     * Charting a location will record your agent as the one who created the chart.
     */
    async createChart(
        req: operations.CreateChartRequest,
        security: operations.CreateChartSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateChartResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateChartRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/chart", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateChartSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateChartResponse = new operations.CreateChartResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createChart201ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.CreateChart201ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Scan Ships
     *
     * @remarks
     * Activate your ship's sensor arrays to scan for ship information.
     */
    async createShipShipScan(
        req: operations.CreateShipShipScanRequest,
        security: operations.CreateShipShipScanSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateShipShipScanResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateShipShipScanRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/scan/ships", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateShipShipScanSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateShipShipScanResponse =
            new operations.CreateShipShipScanResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createShipShipScan201ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.CreateShipShipScan201ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Scan Systems
     *
     * @remarks
     * Activate your ship's sensor arrays to scan for system information.
     */
    async createShipSystemScan(
        req: operations.CreateShipSystemScanRequest,
        security: operations.CreateShipSystemScanSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateShipSystemScanResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateShipSystemScanRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/scan/systems", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateShipSystemScanSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateShipSystemScanResponse =
            new operations.CreateShipSystemScanResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createShipSystemScan201ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.CreateShipSystemScan201ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Scan Waypoints
     *
     * @remarks
     * Activate your ship's sensor arrays to scan for waypoint information.
     */
    async createShipWaypointScan(
        req: operations.CreateShipWaypointScanRequest,
        security: operations.CreateShipWaypointScanSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateShipWaypointScanResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateShipWaypointScanRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(
            baseURL,
            "/my/ships/{shipSymbol}/scan/waypoints",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateShipWaypointScanSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateShipWaypointScanResponse =
            new operations.CreateShipWaypointScanResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createShipWaypointScan201ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.CreateShipWaypointScan201ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create Survey
     *
     * @remarks
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.
     *
     * Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     */
    async createSurvey(
        req: operations.CreateSurveyRequest,
        security: operations.CreateSurveySecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateSurveyResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateSurveyRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/survey", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateSurveySecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateSurveyResponse = new operations.CreateSurveyResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createSurvey201ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.CreateSurvey201ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Dock Ship
     *
     * @remarks
     * Attempt to dock your ship at it's current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.
     *
     * The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     */
    async dockShip(
        req: operations.DockShipRequest,
        security: operations.DockShipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DockShipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DockShipRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/dock", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DockShipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DockShipResponse = new operations.DockShipResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.dockShip200Response = utils.objectToClass(
                        httpRes?.data,
                        operations.DockShipDockShip200Response
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Extract Resources
     *
     * @remarks
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     */
    async extractResources(
        req: operations.ExtractResourcesRequest,
        security: operations.ExtractResourcesSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ExtractResourcesResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ExtractResourcesRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/extract", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ExtractResourcesSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ExtractResourcesResponse = new operations.ExtractResourcesResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.extractResources201ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.ExtractResources201ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get Ship
     *
     * @remarks
     * Retrieve the details of your ship.
     */
    async getMyShip(
        req: operations.GetMyShipRequest,
        security: operations.GetMyShipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetMyShipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetMyShipRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetMyShipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetMyShipResponse = new operations.GetMyShipResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMyShip200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetMyShip200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get Ship Cargo
     *
     * @remarks
     * Retrieve the cargo of your ship.
     */
    async getMyShipCargo(
        req: operations.GetMyShipCargoRequest,
        security: operations.GetMyShipCargoSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetMyShipCargoResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetMyShipCargoRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/cargo", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetMyShipCargoSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetMyShipCargoResponse = new operations.GetMyShipCargoResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMyShipCargo200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetMyShipCargo200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List Ships
     *
     * @remarks
     * Retrieve all of your ships.
     */
    async getMyShips(
        req: operations.GetMyShipsRequest,
        security: operations.GetMyShipsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetMyShipsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetMyShipsRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = baseURL.replace(/\/$/, "") + "/my/ships";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetMyShipsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetMyShipsResponse = new operations.GetMyShipsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMyShips200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetMyShips200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get Ship Cooldown
     *
     * @remarks
     * Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.
     *
     * Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.
     *
     * Response returns a 204 status code (no-content) when the ship has no cooldown.
     */
    async getShipCooldown(
        req: operations.GetShipCooldownRequest,
        security: operations.GetShipCooldownSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetShipCooldownResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetShipCooldownRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/cooldown", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetShipCooldownSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetShipCooldownResponse = new operations.GetShipCooldownResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getShipCooldown200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetShipCooldown200ApplicationJSON
                    );
                }
                break;
            case httpRes?.status == 204:
                break;
        }

        return res;
    }

    /**
     * Get Ship Nav
     *
     * @remarks
     * Get the current nav status of a ship.
     */
    async getShipNav(
        req: operations.GetShipNavRequest,
        security: operations.GetShipNavSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetShipNavResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetShipNavRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/nav", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetShipNavSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetShipNavResponse = new operations.GetShipNavResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getShipNav200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetShipNav200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Jettison Cargo
     *
     * @remarks
     * Jettison cargo from your ship's cargo hold.
     */
    async jettison(
        req: operations.JettisonRequest,
        security: operations.JettisonSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.JettisonResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.JettisonRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/jettison", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.JettisonSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.JettisonResponse = new operations.JettisonResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.jettison200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.Jettison200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Jump Ship
     *
     * @remarks
     * Jump your ship instantly to a target system. When used while in orbit or docked to a jump gate waypoint, any ship can use this command. When used elsewhere, jumping requires a jump drive unit and consumes a unit of antimatter (which needs to be in your cargo).
     */
    async jumpShip(
        req: operations.JumpShipRequest,
        security: operations.JumpShipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.JumpShipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.JumpShipRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/jump", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.JumpShipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.JumpShipResponse = new operations.JumpShipResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.jumpShip200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.JumpShip200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Navigate Ship
     *
     * @remarks
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.
     *
     * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
     *
     * To travel between systems, see the ship's warp or jump actions.
     */
    async navigateShip(
        req: operations.NavigateShipRequest,
        security: operations.NavigateShipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.NavigateShipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.NavigateShipRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/navigate", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.NavigateShipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.NavigateShipResponse = new operations.NavigateShipResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.navigateShip200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.NavigateShip200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Negotiate Contract
     */
    async negotiateContract(
        req: operations.NegotiateContractRequest,
        security: operations.NegotiateContractSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.NegotiateContractResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.NegotiateContractRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(
            baseURL,
            "/my/ships/{shipSymbol}/negotiate/contract",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.NegotiateContractSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.NegotiateContractResponse = new operations.NegotiateContractResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.negotiateContract200Response = utils.objectToClass(
                        httpRes?.data,
                        operations.NegotiateContractNegotiateContract200Response
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Orbit Ship
     *
     * @remarks
     * Attempt to move your ship into orbit at it's current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.
     *
     * The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     */
    async orbitShip(
        req: operations.OrbitShipRequest,
        security: operations.OrbitShipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.OrbitShipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.OrbitShipRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/orbit", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.OrbitShipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.OrbitShipResponse = new operations.OrbitShipResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.orbitShip200Response = utils.objectToClass(
                        httpRes?.data,
                        operations.OrbitShipOrbitShip200Response
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Patch Ship Nav
     *
     * @remarks
     * Update the nav data of a ship, such as the flight mode.
     */
    async patchShipNav(
        req: operations.PatchShipNavRequest,
        security: operations.PatchShipNavSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PatchShipNavResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PatchShipNavRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/nav", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PatchShipNavSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "patch",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PatchShipNavResponse = new operations.PatchShipNavResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.patchShipNav200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.PatchShipNav200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Purchase Cargo
     *
     * @remarks
     * Purchase cargo.
     */
    async purchaseCargo(
        req: operations.PurchaseCargoRequest,
        security: operations.PurchaseCargoSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PurchaseCargoResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PurchaseCargoRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/purchase", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PurchaseCargoSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PurchaseCargoResponse = new operations.PurchaseCargoResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.purchaseCargo201Response = utils.objectToClass(
                        httpRes?.data,
                        operations.PurchaseCargoPurchaseCargo201Response
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Purchase Ship
     *
     * @remarks
     * Purchase a ship
     */
    async purchaseShip(
        req: operations.PurchaseShipRequestBody,
        security: operations.PurchaseShipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PurchaseShipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PurchaseShipRequestBody(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = baseURL.replace(/\/$/, "") + "/my/ships";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PurchaseShipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PurchaseShipResponse = new operations.PurchaseShipResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.purchaseShip201ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.PurchaseShip201ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Refuel Ship
     *
     * @remarks
     * Refuel your ship from the local market.
     */
    async refuelShip(
        req: operations.RefuelShipRequest,
        security: operations.RefuelShipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.RefuelShipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RefuelShipRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/refuel", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.RefuelShipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.RefuelShipResponse = new operations.RefuelShipResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.refuelShip200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.RefuelShip200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Sell Cargo
     *
     * @remarks
     * Sell cargo.
     */
    async sellCargo(
        req: operations.SellCargoRequest,
        security: operations.SellCargoSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.SellCargoResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SellCargoRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/sell", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.SellCargoSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.SellCargoResponse = new operations.SellCargoResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.sellCargo201Response = utils.objectToClass(
                        httpRes?.data,
                        operations.SellCargoSellCargo201Response
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Ship Refine
     *
     * @remarks
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     */
    async shipRefine(
        req: operations.ShipRefineRequest,
        security: operations.ShipRefineSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ShipRefineResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ShipRefineRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/refine", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ShipRefineSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ShipRefineResponse = new operations.ShipRefineResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.shipRefine200Response = utils.objectToClass(
                        httpRes?.data,
                        operations.ShipRefineShipRefine200Response
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Transfer Cargo
     *
     * @remarks
     * Transfer cargo between ships.
     */
    async transferCargo(
        req: operations.TransferCargoRequest,
        security: operations.TransferCargoSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.TransferCargoResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TransferCargoRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/transfer", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.TransferCargoSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.TransferCargoResponse = new operations.TransferCargoResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.transferCargo200Response = utils.objectToClass(
                        httpRes?.data,
                        operations.TransferCargoTransferCargo200Response
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Warp Ship
     *
     * @remarks
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.
     *
     * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
     */
    async warpShip(
        req: operations.WarpShipRequest,
        security: operations.WarpShipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.WarpShipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.WarpShipRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/my/ships/{shipSymbol}/warp", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.WarpShipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(this._defaultClient, security);

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.WarpShipResponse = new operations.WarpShipResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.warpShip200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.WarpShip200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }
}
