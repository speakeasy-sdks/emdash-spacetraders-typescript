/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Systems
 */
export class Systems {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Get Jump Gate
     *
     * @remarks
     * Get jump gate details for a waypoint.
     */
    async getJumpGate(
        req: operations.GetJumpGateRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetJumpGateResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetJumpGateRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetJumpGateResponse = new operations.GetJumpGateResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getJumpGate200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetJumpGate200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get Market
     *
     * @remarks
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     */
    async getMarket(
        req: operations.GetMarketRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetMarketResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetMarketRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/systems/{systemSymbol}/waypoints/{waypointSymbol}/market",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetMarketResponse = new operations.GetMarketResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMarket200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetMarket200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get Shipyard
     *
     * @remarks
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     */
    async getShipyard(
        req: operations.GetShipyardRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetShipyardResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetShipyardRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetShipyardResponse = new operations.GetShipyardResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getShipyard200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetShipyard200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get System
     *
     * @remarks
     * Get the details of a system.
     */
    async getSystem(
        req: operations.GetSystemRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetSystemResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetSystemRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/systems/{systemSymbol}", req);

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetSystemResponse = new operations.GetSystemResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getSystem200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetSystem200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List Waypoints
     *
     * @remarks
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     */
    async getSystemWaypoints(
        req: operations.GetSystemWaypointsRequest,
        security: operations.GetSystemWaypointsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetSystemWaypointsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetSystemWaypointsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/systems/{systemSymbol}/waypoints", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetSystemWaypointsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetSystemWaypointsResponse =
            new operations.GetSystemWaypointsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getSystemWaypoints200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetSystemWaypoints200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List Systems
     *
     * @remarks
     * Return a list of all systems.
     */
    async getSystems(
        req: operations.GetSystemsRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetSystemsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetSystemsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/systems";

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetSystemsResponse = new operations.GetSystemsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getSystems200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetSystems200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get Waypoint
     *
     * @remarks
     * View the details of a waypoint.
     */
    async getWaypoint(
        req: operations.GetWaypointRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetWaypointResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetWaypointRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/systems/{systemSymbol}/waypoints/{waypointSymbol}",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetWaypointResponse = new operations.GetWaypointResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getWaypoint200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.GetWaypoint200ApplicationJSON
                    );
                }
                break;
        }

        return res;
    }
}
